{"version":3,"sources":["logo.svg","CalculateWinner.js","Game.js","Square.js","Board.js","serviceWorker.js","index.js"],"names":["module","exports","CalculateWinner","squares","lines","i","length","a","b","c","Game","props","state","history","Array","fill","stepNumber","xIsNext","this","slice","setState","concat","step","status","current","winner","moves","map","move","desc","key","onClick","jumpTo","className","handleClick","React","Component","Square","value","Board","renderSquare","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.77262841.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport Board from './Board';\r\nimport Square from './Square';\r\nimport Game from \"./Game\";\r\n\r\n\r\nexport default function CalculateWinner(squares) {\r\n    const lines = [\r\n      [0, 1, 2],\r\n      [3, 4, 5],\r\n      [6, 7, 8],\r\n      [0, 3, 6],\r\n      [1, 4, 7],\r\n      [2, 5, 8],\r\n      [0, 4, 8],\r\n      [2, 4, 6]\r\n    ];\r\n    for (let i = 0; i < lines.length; i++) {\r\n      const [a, b, c] = lines[i];\r\n      if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n        return squares[a];\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n  ","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport Board from './Board';\r\nimport Square from './Square';\r\n\r\nimport CalculateWinner from './CalculateWinner';\r\n\r\nclass Game extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            history: [\r\n                {\r\n                    squares: Array(9).fill(null)\r\n                }\r\n            ],\r\n            stepNumber: 0,\r\n            xIsNext: true\r\n        };\r\n    }\r\n    handleClick(i) {\r\n        const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n        const current = history[history.length - 1];\r\n        const squares = current.squares.slice();\r\n        if (CalculateWinner(squares) || squares[i]) {\r\n            return;\r\n        }\r\n        squares[i] = this.state.xIsNext ? \"X\" : \"O\";\r\n        this.setState({\r\n            history: history.concat([\r\n                {\r\n                    squares: squares\r\n                }\r\n            ]),\r\n            stepNumber: history.length,\r\n            xIsNext: !this.state.xIsNext\r\n        });\r\n    }\r\n    jumpTo(step) {\r\n        this.setState({\r\n            stepNumber: step,\r\n            xIsNext: (step % 2) === 0\r\n        });\r\n    }\r\n    render() {\r\n        const history = this.state.history;\r\n        const current = history[this.state.stepNumber];\r\n        const winner = CalculateWinner(current.squares);\r\n        const moves = history.map((step, move) => {\r\n            const desc = move ?\r\n                'Go to move #' + move :\r\n                'Go to game start';\r\n            return (<li key={move}>\r\n                <button onClick={() => this.jumpTo(move)}>{desc}</button>\r\n            </li>);\r\n        });\r\n        let status;\r\n        if (winner) {\r\n            status = \"Winner: \" + winner;\r\n        }\r\n        else {\r\n            status = \"Next player: \" + (this.state.xIsNext ? \"X\" : \"O\");\r\n        }\r\n        return (<div className=\"game\">\r\n            <div className=\"game-board\">\r\n                <Board squares={current.squares} onClick={i => this.handleClick(i)} />\r\n            </div>\r\n            <div className=\"game-info\">\r\n                <div>{status}</div>\r\n                <ol>{moves}</ol>\r\n            </div>\r\n        </div>\r\n        );\r\n    }\r\n}\r\nexport default Game;","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport Board from './Board';\r\nimport Game from \"./Game\";\r\nimport CalculateWinner from './CalculateWinner';\r\n\r\n\r\nexport default function Square(props) {\r\n    return (\r\n      <button className=\"square\" onClick={props.onClick}>\r\n        {props.value}\r\n      </button>\r\n    );\r\n  }\r\n  ","import React from 'react';\r\nimport logo from './logo.svg';\r\n\r\nimport Square from './Square';\r\nimport Game from \"./Game\";\r\nimport CalculateWinner from './CalculateWinner';\r\n\r\nexport default class Board extends React.Component {\r\n  renderSquare(i) {\r\n    return (\r\n      <Square\r\n        value={this.props.squares[i]}\r\n        onClick={() => this.props.onClick(i)}\r\n      />\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"board-row\">\r\n          {this.renderSquare(0)}\r\n          {this.renderSquare(1)}\r\n          {this.renderSquare(2)}\r\n        </div>\r\n        <div className=\"board-row\">\r\n          {this.renderSquare(3)}\r\n          {this.renderSquare(4)}\r\n          {this.renderSquare(5)}\r\n        </div>\r\n        <div className=\"board-row\">\r\n          {this.renderSquare(6)}\r\n          {this.renderSquare(7)}\r\n          {this.renderSquare(8)}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n \r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport React from 'react';\nimport logo from './logo.svg';\nimport Board from './Board';\n\nimport Game from \"./Game\";\nimport CalculateWinner from './CalculateWinner';\n\nReactDOM.render(<Game />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}